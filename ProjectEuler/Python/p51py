from math import sqrt
from itertools import permutations as perm
import time

prime_list = []
prime_set = set()

def gen_bit_sieve(lim):
  lim2 = lim // 2
  r = int(sqrt(lim)-1)//2
  bit_sieve = [False]*lim2
  bit_sieve[0] = True
  for i in range(1, r+1):
    if not bit_sieve[i]:
      for j in range(i*(i+1)+i*(i+1), lim2, 2*i+1):
        bit_sieve[j] = True
  return bit_sieve

def gen_sieve(lim):
  global prime_list, prime_set
  bit_sieve = gen_bit_sieve(lim)
  prime_list = [i+i+1 for i in range((lim//2)-1) if not bit_sieve[i]]
  prime_set = set(prime_list)


def check_num(num, start, change):
  adder = int(change)
  lim = 9 if start else 10
  place = '1' if start else '0'
  start_str = [num[i] if change[i] == '0' else place for i in range(len(num))]
  star = int(''.join(start_str))
  ans = [star+adder*i for i in range(lim) if star+adder*i in prime_set]
  return ans[0] if len(ans) == 8 else 0


def sol1(lim):
  tests = list(set([''.join(i)+'0' for i in perm('00111', 5)])) +list(set([''.join(i)+'0' for i in perm('00011', 5)]))
  ck_sieve = [str(i) for i in prime_list if len(str(i)) == 6]
  for i in ck_sieve:
    for j in tests:
      pos = check_num(i, True if j[0] == '1' else False, j)
      if pos != 0:
        print(pos)
        return


def main():
  lim = 1000000
  a = time.clock()
  gen_sieve(lim)
  b = time.clock()
  print('time taken is {:f}'.format(b-a))
  a = time.clock()
  sol1(lim)
  b = time.clock()
  print('time taken is {:f}'.format(b-a))
main()
  
